{"version":3,"sources":["Components/Modal/index.js","Components/Flow/Node/Basic/index.js","Components/Flow/Node/IfElse/index.js","Components/Flow/Node/Answer/index.js","Components/Sidebar/index.js","Components/Flow/index.js","Components/Flow/Edge/index.js","App.js","reportWebVitals.js","index.js"],"names":["style","position","top","left","transform","minWidth","borderRadius","bgcolor","boxShadow","p","open","onClose","children","Modal","Box","sx","primaryColor","handlerColor","NodeWrapper","styled","div","initialState","title","answers","Container","Node","props","color","nodes","map","data","index","onDragStart","event","nodeType","dataTransfer","setData","effectAllowed","type","draggable","className","name","nodeTypes","normal","variant","React","useState","setOpen","selected","setSelected","state","setState","auxState","setAuxState","handleClose","ref","useRef","handleClickOutside","current","contains","target","useEffect","document","addEventListener","removeEventListener","onDoubleClick","Tooltip","placement","onClick","xmlns","class","width","height","viewBox","stroke-width","fill","stroke-linecap","stroke-linejoin","stroke","d","cx","cy","r","id","item","length","Grid","container","spacing","xs","Typography","gutterBottom","component","TextField","label","value","onChange","fullWidth","e","aux","slice","handleChangeAnswer","Button","startIcon","push","Stack","direction","disabled","ifElse","text","answer","edgeTypes","custom","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","arrowHeadType","markerEndId","edgePath","getBezierPath","markerEnd","getMarkerEnd","href","fontSize","startOffset","textAnchor","initialElements","reactFlowWrapper","reactFlowInstance","setReactFlowInstance","elements","setElements","backgroundColor","onConnect","params","els","addEdge","onElementsRemove","elementsToRemove","removeElements","onLoad","_reactFlowInstance","onDrop","preventDefault","reactFlowBounds","getBoundingClientRect","getData","project","x","clientX","y","clientY","newNode","dragHandle","animated","es","concat","onDragOver","dropEffect","Sidebar","App","Flow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2c6c8c22.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport Modal from '@mui/material/Modal';\r\nimport Box from '@mui/material/Box';\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  minWidth: '40%',\r\n  borderRadius:'.25em',\r\n  bgcolor: 'background.paper',\r\n  //border: '2px solid #000',\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nexport default ({open, onClose, children}) => {\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        open={open}\r\n        onClose={onClose}\r\n      >\r\n        <Box sx={style}>\r\n            {\r\n                children\r\n            }\r\n        </Box >\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\nimport styled from 'styled-components';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport TextField from '@mui/material/TextField';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport Modal from '../../../Modal';\r\n\r\nconst primaryColor = '#15295c';\r\nconst drawerColor = \"#b3b3b3\";\r\n\r\nconst handlerColor = '#e67e22';\r\n\r\nconst NodeWrapper = styled.div`\r\n    border: 2px solid #ccc;\r\n    //border-left: 0;\r\n    //border-right: 0;\r\n    cursor: default;\r\n    position: relative;\r\n    background-color: #fff;\r\n    //overflow: hidden;\r\n    border-radius: .25em;\r\n    transition: all .5s;\r\n    .drag-handle{\r\n        cursor: move;\r\n        display: flex;\r\n        //border-bottom: 1px solid  ${primaryColor};\r\n        padding: .25em .75em;\r\n        color: #fff;\r\n        background-color: ${handlerColor};\r\n        border-radius: .2em .2em 0 0;\r\n        .drawer-icon{\r\n            stroke:#fff;\r\n        }\r\n        .handle{\r\n            display: flex;\r\n            align-items: center;\r\n            width: max-content;\r\n            margin-right: .25em;\r\n        }\r\n        &:hover{\r\n            .drawer-icon{\r\n                filter: brightness(1.25);\r\n            }\r\n        }\r\n    }\r\n    .in-handle{\r\n        border-radius: 0;\r\n        border-radius: 1em 0 0 1em;\r\n        background-color: #3498db;\r\n        border: none;\r\n        width: .5em;\r\n        transition: all .25s;\r\n        //height: calc(100% + 2px);\r\n        height: 1em;\r\n        //position: absolute;\r\n        //left: -1em;\r\n        left: 1.5em;\r\n        top:auto;\r\n        &:hover{\r\n            filter: brightness(1.25);\r\n        }\r\n    }\r\n    .out-handle{\r\n        border-radius: 0;\r\n        border-radius: 0 1em 1em 0;\r\n        background-color: #2ecc71;\r\n        border: none;\r\n        width: .5em;\r\n        transition: all .25s;\r\n        //height: calc(100% + 2px);   \r\n        height: 1em;\r\n        //position: absolute;\r\n        left: 0;\r\n        top:auto;\r\n        &:hover{\r\n            filter: brightness(1.25);\r\n        }\r\n    }\r\n    .drawer-icon{\r\n        stroke:  ${drawerColor};\r\n        transition: all .25s;\r\n    }\r\n    .answers{\r\n        padding: 0;\r\n        padding-top: .5em;\r\n        margin: 0;\r\n        .answer{\r\n            list-style: none;\r\n            cursor: pointer;\r\n            color: #15295c;\r\n            border-bottom: 1px solid #f0f0f0;\r\n            transition: all .25s;\r\n            background-color: #ddd;\r\n            padding: .25em 1em;\r\n            margin-left: .5em;\r\n            margin-right: .5em;\r\n            margin-bottom: .5em;\r\n            position: relative;\r\n            padding-left: 1.5em;\r\n            margin-left: 1.25em;\r\n            text-transform: capitalize;\r\n            border-radius: .25em;\r\n            &:hover{\r\n                color: #15295c;\r\n            }\r\n            .count-circle{\r\n                height: 2em;\r\n                border-radius: 50%;\r\n                background-color: ${primaryColor};\r\n                position: absolute;\r\n                left: -1em;\r\n                top: calc(50% - 1em);\r\n                width: 2em;\r\n                box-sizing: border-box;\r\n                border: 3px solid #fff;\r\n                color: #fff;\r\n                font-size: 1em;\r\n                text-align: center;\r\n            }\r\n        }\r\n    }\r\n    .handle-in-container{\r\n        background-color: transparent;\r\n        height: 100%;\r\n        width: 2em;\r\n        position: absolute;\r\n        left: -2em;\r\n        top: 0;\r\n        padding-top: 2em;\r\n        box-sizing: border-box;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        &:hover{\r\n            .in-handle{\r\n                width: 1em; \r\n                left: 1em;\r\n            }\r\n        }\r\n    }\r\n    .handle-out-container{\r\n        background-color: transparent;\r\n        height: 100%;\r\n        width: 2em;\r\n        position: absolute;\r\n        right: -2em;\r\n        top: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        padding-top: 2em;\r\n        box-sizing: border-box;\r\n        &:hover{\r\n            .out-handle{\r\n                width: 1em; \r\n                right: 1em;\r\n            }\r\n        }\r\n    }\r\n    &.active{\r\n        border: 2px dashed ${handlerColor};\r\n    }\r\n    .skeleton{\r\n        height: 1em;\r\n        background: #ecf0f1;\r\n        margin: 0 .5em .5em .5em;\r\n        border-radius: .25em;\r\n    }\r\n`;\r\n\r\nconst initialState = {\r\n    title:'',\r\n    answers:[]\r\n}\r\n\r\nexport default ({ data, variant='' }) => {\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selected, setSelected] = React.useState(false);\r\n    const [state, setState] = React.useState({...initialState});\r\n    const [auxState, setAuxState] = React.useState({...initialState});\r\n\r\n    const handleOpen = () => {\r\n        setAuxState({...state});\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setAuxState({...state});\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleSelection = () => {\r\n        setSelected(true);\r\n    }\r\n\r\n    let ref = React.useRef(null);\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (ref.current && !ref.current.contains(event.target)) {\r\n            setSelected(false);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        document.addEventListener('click', handleClickOutside, true);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside, true);\r\n        };\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        let {name, value} = event.target;\r\n        setAuxState({...auxState, [name]:value});\r\n    }\r\n\r\n    const handleUpdate = () => {\r\n        setState({...auxState});\r\n        setOpen(false);\r\n    }\r\n\r\n    const addAnswer = () => {\r\n        let aux = auxState.answers.slice();\r\n        aux.push({\r\n            title:'',\r\n        });\r\n        setAuxState({...auxState, answers:aux});\r\n    }\r\n\r\n    const handleChangeAnswer = (event, index) => {\r\n        let {name, value} = event.target;\r\n        let aux = auxState.answers.slice();\r\n        aux[index] = {[name]:value}\r\n        setAuxState({...auxState, answers:aux});\r\n    }\r\n\r\n    return (\r\n        <NodeWrapper onDoubleClick={handleOpen} className={selected?'active':''}>\r\n            <Tooltip title=\"Doble click para editar\" placement=\"top\">\r\n                <div className=\"test\" onClick={handleSelection} ref={ref}>\r\n                    <span className=\"drag-handle\">\r\n                        <div className='handle'>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-grip-vertical drawer-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                                <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                                <circle cx=\"9\" cy=\"5\" r=\"1\" />\r\n                                <circle cx=\"9\" cy=\"12\" r=\"1\" />\r\n                                <circle cx=\"9\" cy=\"19\" r=\"1\" />\r\n                                <circle cx=\"15\" cy=\"5\" r=\"1\" />\r\n                                <circle cx=\"15\" cy=\"12\" r=\"1\" />\r\n                                <circle cx=\"15\" cy=\"19\" r=\"1\" />\r\n                            </svg>\r\n                        </div>\r\n                        <div>\r\n                            {state.title!==''?state.title:'Pregunta sin titulo'}\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </Tooltip>\r\n            <div className='handle-in-container'>\r\n                <Handle \r\n                    type=\"target\" \r\n                    position=\"left\" \r\n                    id={`in-${data.id}`} \r\n                    className={'in-handle'} \r\n                />\r\n            </div>\r\n            <ul className={'answers'}>\r\n                {state.answers.map((item, index)=>{\r\n                    return (\r\n                        <li key={index} className={'answer'}>\r\n                            {item.title}\r\n                            <div className={'count-circle'}>\r\n                                {index+1}\r\n                            </div>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n            {\r\n                state.answers.length===0 && \r\n                <div className='skeleton'/>\r\n            }\r\n            <div className='handle-out-container'>\r\n                <Handle\r\n                    type=\"source\"\r\n                    position=\"right\"\r\n                    id={`out-${data.id}`}\r\n                    className={'out-handle'} \r\n                />\r\n            </div>\r\n            \r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n            >\r\n                <div>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                Configura tu pregunta\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField name=\"title\" label=\"Titulo de la pregunta\" variant=\"outlined\" value={auxState.title} onChange={handleChange} fullWidth/>\r\n                        </Grid>\r\n                        {\r\n                            auxState.answers.map((item, index)=>\r\n                                <Grid item xs={12} key={index}>\r\n                                    <TextField name=\"title\" label=\"Titulo de la respuesta\" variant=\"outlined\" value={item.title} fullWidth onChange={(e)=>{handleChangeAnswer(e,index)}}/>\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                        <Grid item xs={12}>\r\n                            <Button variant=\"outlined\" startIcon={<AddIcon />} onClick={addAnswer}>\r\n                                Agregar respuesta\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Stack spacing={1} direction=\"row\">\r\n                                <Button variant=\"contained\" onClick={handleUpdate} disabled={auxState.title===''}>Aceptar</Button>\r\n                                <Button variant=\"outlined\" onClick={handleClose}>Cancelar</Button>\r\n                            </Stack>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Modal>\r\n        </NodeWrapper>\r\n    );\r\n};","import React from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\nimport styled from 'styled-components';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nimport Modal from '../../../Modal';\r\n\r\nconst primaryColor = '#15295c';\r\nconst drawerColor = \"#b3b3b3\";\r\n\r\nconst handlerColor = '#9b59b6';\r\n\r\nconst NodeWrapper = styled.div`\r\n    border: 2px solid #ccc;\r\n    //border-left: 0;\r\n    //border-right: 0;\r\n    cursor: default;\r\n    position: relative;\r\n    background-color: #fff;\r\n    border-radius: .25em;\r\n    transition: all .5s;\r\n    .drag-handle{\r\n        cursor: move;\r\n        display: flex;\r\n        //border-bottom: 1px solid  ${primaryColor};\r\n        padding: .25em .75em;\r\n        color: #fff;\r\n        background-color: ${handlerColor};\r\n        border-radius: .2em .2em 0 0;\r\n        .drawer-icon{\r\n            stroke:#fff;\r\n        }\r\n        .handle{\r\n            display: flex;\r\n            align-items: center;\r\n            width: max-content;\r\n            margin-right: .25em;\r\n        }\r\n        &:hover{\r\n            .drawer-icon{\r\n                filter: brightness(1.25);\r\n            }\r\n        }\r\n    }\r\n    .in-handle{\r\n        border-radius: 0;\r\n        border-radius: 1em 0 0 1em;\r\n        background-color: #3498db;\r\n        border: none;\r\n        width: .5em;\r\n        height: 1em;\r\n        transition: all .25s;\r\n        //height: calc(100% + 2px);\r\n        position: absolute;\r\n        left: 1.5em;\r\n        &:hover{\r\n            filter: brightness(1.25);\r\n        }\r\n    }\r\n    .out-handle-if, .out-handle-else{\r\n        border-radius: 0;\r\n        border-radius: 0 1em 1em 0;\r\n        background-color: #5ed1d8;\r\n        border: none;\r\n        width: .5em;\r\n        height: 1em;\r\n        transition: all .25s;\r\n        //right: 1.5em;\r\n        //height: calc(50% + 0px);   \r\n        //position: absolute;\r\n        position: relative;\r\n        top: auto;\r\n        left: 0;\r\n        &:hover{\r\n            filter: brightness(1.25);\r\n        }\r\n    }\r\n    .handle-in-container{\r\n        background-color: transparent;\r\n        height: 100%;\r\n        width: 2em;\r\n        position: absolute;\r\n        left: -2em;\r\n        top: 0;\r\n        padding-top: 2em;\r\n        box-sizing: border-box;\r\n        &:hover{\r\n            .in-handle{\r\n                width: 1em; \r\n                left: 1em;\r\n            }\r\n        }\r\n    }\r\n    .handle-out-container{\r\n        background-color: transparent;\r\n        height: 100%;\r\n        width: 2em;\r\n        position: absolute;\r\n        right: -2em;\r\n        top: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-around;\r\n        padding-top: 2em;\r\n        box-sizing: border-box;\r\n        &:hover{\r\n            .out-handle-if, .out-handle-else{\r\n                width: 1em; \r\n                right: 1em;\r\n            }\r\n        }\r\n    }\r\n    .out-handle-if{\r\n        //top: calc(25%);\r\n        background-color: #2ecc71;\r\n    }\r\n    .out-handle-else{\r\n        //top: calc(75%);\r\n        background-color: #e74c3c;\r\n    }\r\n    .drawer-icon{\r\n        stroke:  ${drawerColor};\r\n        transition: all .25s;\r\n    }\r\n    .answers{\r\n        padding: 0;\r\n        padding-top: .5em;\r\n        margin: 0;\r\n        .answer{\r\n            list-style: none;\r\n            cursor: pointer;\r\n            color: #15295c;\r\n            border-bottom: 1px solid #f0f0f0;\r\n            transition: all .25s;\r\n            background-color: #ddd;\r\n            padding: .25em 1em;\r\n            margin-left: .5em;\r\n            margin-right: .5em;\r\n            margin-bottom: .5em;\r\n            position: relative;\r\n            padding-left: 1.5em;\r\n            margin-left: 1.25em;\r\n            text-transform: capitalize;\r\n            border-radius: .25em;\r\n            &:hover{\r\n                color: #15295c;\r\n            }\r\n            .count-circle{\r\n                height: 2em;\r\n                border-radius: 50%;\r\n                background-color: ${primaryColor};\r\n                position: absolute;\r\n                left: -1em;\r\n                top: calc(50% - 1em);\r\n                width: 2em;\r\n                box-sizing: border-box;\r\n                border: 3px solid #fff;\r\n                color: #fff;\r\n                font-size: 1em;\r\n                text-align: center;\r\n            }\r\n        }\r\n    }\r\n    &.active{\r\n        border: 2px dashed ${handlerColor};\r\n    }\r\n    .skeleton{\r\n        height: 1em;\r\n        background: #ecf0f1;\r\n        margin: 0 .5em .5em .5em;\r\n        border-radius: .25em;\r\n    }\r\n`;\r\n\r\nconst initialState = {\r\n    title:'',\r\n    answers:[]\r\n}\r\n\r\nexport default ({ data }) => {\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selected, setSelected] = React.useState(false);\r\n    const [state, setState] = React.useState({...initialState});\r\n    const [auxState, setAuxState] = React.useState({...initialState});\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleSelection = () => {\r\n        setSelected(true);\r\n    }\r\n\r\n    let ref = React.useRef(null);\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (ref.current && !ref.current.contains(event.target)) {\r\n            setSelected(false);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        document.addEventListener('click', handleClickOutside, true);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside, true);\r\n        };\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        let {name, value} = event.target;\r\n        setState({...state, [name]:value});\r\n    }\r\n\r\n    return (\r\n        <NodeWrapper onDoubleClick={handleOpen} className={selected?'active':''}>\r\n            <Tooltip title=\"Doble click para editar\" placement=\"top\">\r\n                <div className=\"test\" onClick={handleSelection} ref={ref}>\r\n                    <span className=\"drag-handle\">\r\n                        <div className='handle'>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-grip-vertical drawer-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                                <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                                <circle cx=\"9\" cy=\"5\" r=\"1\" />\r\n                                <circle cx=\"9\" cy=\"12\" r=\"1\" />\r\n                                <circle cx=\"9\" cy=\"19\" r=\"1\" />\r\n                                <circle cx=\"15\" cy=\"5\" r=\"1\" />\r\n                                <circle cx=\"15\" cy=\"12\" r=\"1\" />\r\n                                <circle cx=\"15\" cy=\"19\" r=\"1\" />\r\n                            </svg>\r\n                        </div>\r\n                        <div>\r\n                            {state.title!==''?state.title:'Pregunta sin titulo'}\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </Tooltip>\r\n            <div className='handle-in-container'>\r\n                <Handle \r\n                    type=\"target\" \r\n                    position=\"left\" \r\n                    id={`in-${data.id}`} \r\n                    className={'in-handle'} \r\n                />\r\n            </div>\r\n            <ul className={'answers'}>\r\n                {state.answers.map((item, index)=>{\r\n                    return (\r\n                        <li key={index} className={'answer'}>\r\n                            {item.text}\r\n                            <div className={'count-circle'}>\r\n                                {index+1}\r\n                            </div>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n            {\r\n                state.answers.length===0 && \r\n                <div className='skeleton'/>\r\n            }\r\n            <div className='handle-out-container'>\r\n                <Handle\r\n                    type=\"source\"\r\n                    position=\"right\"\r\n                    id={`out-if-${data.id}`}\r\n                    className={'out-handle-if'} \r\n                />\r\n                <Handle\r\n                    type=\"source\"\r\n                    position=\"right\"\r\n                    id={`out-else-${data.id}`}\r\n                    className={'out-handle-else'} \r\n                />\r\n            </div>\r\n            \r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n            >\r\n                <div>\r\n                    Configurar Preguntas y condiciones\r\n                </div>\r\n            </Modal>\r\n        </NodeWrapper>\r\n    );\r\n};","import React from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\nimport styled from 'styled-components';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nimport Modal from '../../../Modal';\r\n\r\nconst primaryColor = '#15295c';\r\nconst drawerColor = \"#b3b3b3\";\r\n\r\nconst handlerColor = '#3498db';\r\n\r\nconst NodeWrapper = styled.div`\r\n    border: 2px solid #ccc;\r\n    //border-left: 0;\r\n    //border-right: 0;\r\n    cursor: default;\r\n    position: relative;\r\n    background-color: #fff;\r\n    //overflow: hidden;\r\n    border-radius: .25em;\r\n    transition: all .5s;\r\n    .drag-handle{\r\n        cursor: move;\r\n        display: flex;\r\n        //border-bottom: 1px solid  ${primaryColor};\r\n        padding: .25em .75em;\r\n        color: #fff;\r\n        background-color: ${handlerColor};\r\n        border-radius: .2em .2em 0 0;\r\n        .drawer-icon{\r\n            stroke:#fff;\r\n        }\r\n        .handle{\r\n            display: flex;\r\n            align-items: center;\r\n            width: max-content;\r\n            margin-right: .25em;\r\n            stroke:red;\r\n        }\r\n        &:hover{\r\n            .drawer-icon{\r\n                filter: brightness(1.25);\r\n            }\r\n        }\r\n    }\r\n    .in-handle{\r\n        border-radius: 0;\r\n        border-radius: 1em 0 0 1em;\r\n        background-color: #3498db;\r\n        border: none;\r\n        width: .5em;\r\n        transition: all .25s;\r\n        //height: calc(100% + 2px);\r\n        height: 1em;\r\n        //position: absolute;\r\n        //left: -1em;\r\n        left: 1.5em;\r\n        top:auto;\r\n        &:hover{\r\n            filter: brightness(1.25);\r\n        }\r\n    }\r\n    .out-handle{\r\n        border-radius: 0;\r\n        border-radius: 0 1em 1em 0;\r\n        background-color: #2ecc71;\r\n        border: none;\r\n        width: .5em;\r\n        transition: all .25s;\r\n        //height: calc(100% + 2px);   \r\n        height: 1em;\r\n        //position: absolute;\r\n        left: 0;\r\n        top:auto;\r\n        &:hover{\r\n            filter: brightness(1.25);\r\n        }\r\n    }\r\n    .drawer-icon{\r\n        stroke:  ${drawerColor};\r\n        transition: all .25s;\r\n    }\r\n    .answers{\r\n        padding: 0;\r\n        padding-top: .5em;\r\n        margin: 0;\r\n        margin-right: 0em;\r\n        .answer{\r\n            list-style: none;\r\n            cursor: pointer;\r\n            color: #15295c;\r\n            border-bottom: 1px solid #f0f0f0;\r\n            transition: all .25s;\r\n            background-color: #ddd;\r\n            padding: .25em 1em;\r\n            margin-left: .5em;\r\n            margin-right: .5em;\r\n            margin-bottom: .5em;\r\n            position: relative;\r\n            padding-left: 1.5em;\r\n            margin-left: 1.25em;\r\n            text-transform: capitalize;\r\n            border-radius: .25em;\r\n            &:hover{\r\n                color: #15295c;\r\n            }\r\n            .count-circle{\r\n                height: 2em;\r\n                border-radius: 50%;\r\n                background-color: ${primaryColor};\r\n                position: absolute;\r\n                left: -1em;\r\n                top: calc(50% - 1em);\r\n                width: 2em;\r\n                box-sizing: border-box;\r\n                border: 3px solid #fff;\r\n                color: #fff;\r\n                font-size: 1em;\r\n                text-align: center;\r\n            }\r\n        }\r\n    }\r\n    .handle-in-container{\r\n        background-color: transparent;\r\n        height: 100%;\r\n        width: 2em;\r\n        position: absolute;\r\n        left: -2em;\r\n        top: 0;\r\n        padding-top: 2em;\r\n        box-sizing: border-box;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        &:hover{\r\n            .in-handle{\r\n                width: 1em; \r\n                left: 1em;\r\n            }\r\n        }\r\n    }\r\n    .handle-out-container{\r\n        background-color: transparent;\r\n        height: 100%;\r\n        width: 2em;\r\n        position: absolute;\r\n        right: -2em;\r\n        top: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        padding-top: 1em;\r\n        box-sizing: border-box;\r\n        &:hover{\r\n            .out-handle{\r\n                width: 1em; \r\n                right: 1em;\r\n            }\r\n        }\r\n    }\r\n    &.active{\r\n        border: 2px dashed ${handlerColor};\r\n    }\r\n    .skeleton{\r\n        height: 1em;\r\n        background: #ecf0f1;\r\n        margin: 0 .5em .5em .5em;\r\n        border-radius: .25em;\r\n    }\r\n`;\r\n\r\nconst initialState = {\r\n    title:'',\r\n    answers:[]\r\n}\r\n\r\nexport default ({ data, variant='' }) => {\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selected, setSelected] = React.useState(false);\r\n    const [state, setState] = React.useState({...initialState});\r\n    const [auxState, setAuxState] = React.useState({...initialState});\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    \r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleSelection = () => {\r\n        setSelected(true);\r\n    }\r\n\r\n    let ref = React.useRef(null);\r\n\r\n    const handleClickOutside = (event) => {\r\n        if (ref.current && !ref.current.contains(event.target)) {\r\n            setSelected(false);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        document.addEventListener('click', handleClickOutside, true);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside, true);\r\n        };\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        let {name, value} = event.target;\r\n        setState({...state, [name]:value});\r\n    }\r\n\r\n    return (\r\n        <NodeWrapper onDoubleClick={handleOpen} className={selected?'active':''}>\r\n            \r\n            <Tooltip title=\"Doble click para editar\" placement=\"top\">\r\n                <div className='test' onClick={handleSelection} ref={ref}>\r\n                    <span className=\"drag-handle\">\r\n                        <div className='handle'>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-grip-vertical drawer-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                                <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                                <circle cx=\"9\" cy=\"5\" r=\"1\" />\r\n                                <circle cx=\"9\" cy=\"12\" r=\"1\" />\r\n                                <circle cx=\"9\" cy=\"19\" r=\"1\" />\r\n                                <circle cx=\"15\" cy=\"5\" r=\"1\" />\r\n                                <circle cx=\"15\" cy=\"12\" r=\"1\" />\r\n                                <circle cx=\"15\" cy=\"19\" r=\"1\" />\r\n                            </svg>\r\n                        </div>\r\n                        <div>\r\n                            {state.title!==''?state.title:'Pregunta sin titulo'}\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </Tooltip>\r\n            <div className='handle-in-container'>\r\n                <Handle \r\n                    type=\"target\" \r\n                    position=\"left\" \r\n                    id={`in-${data.id}`} \r\n                    className={'in-handle'} \r\n                />\r\n            </div>\r\n            <ul className={'answers'}>\r\n                {[].map((item, index)=>{\r\n                    return (\r\n                        <li key={index} className={'answer'}>\r\n                            {item.text}\r\n                            <div className={'count-circle'}>\r\n                                {index+1}\r\n                            </div>\r\n                            <div className='handle-out-container'>\r\n                                <Handle\r\n                                    type=\"source\"\r\n                                    position=\"right\"\r\n                                    id={`out-${data.id}-${index}`}\r\n                                    className={'out-handle'} \r\n                                />\r\n                            </div>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n            {\r\n                state.answers.length===0 && \r\n                <div className='skeleton'/>\r\n            }\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n            >\r\n                <div>\r\n                    <TextField name=\"title\" label=\"Titulo de la pregunta\" variant=\"outlined\" value={state.title} onChange={handleChange}/>\r\n                </div>\r\n            </Modal>\r\n        </NodeWrapper>\r\n    );\r\n};","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 15vw;\r\n    position: fixed;\r\n    left: 0;\r\n    top: 0;\r\n    height: 100vh;\r\n    box-sizing: border-box;\r\n    padding: 1em;\r\n    z-index: 1000;\r\n    background-color: #fff;\r\n    //position: relative;\r\n    .dragable-element{\r\n        cursor: move;\r\n        &:hover{\r\n            transform: rotateX(.1);\r\n        }\r\n    }\r\n    .dndnode{\r\n        border: 1px solid #000;\r\n        border-radius: .25em;\r\n        padding: 1em;\r\n        margin-bottom: .5em;\r\n    }\r\n`;\r\n\r\nconst Node = styled.div`\r\n    border: 1px solid #ccc;\r\n    cursor: move;\r\n    background-color: #fff;\r\n    border-radius: .25em;\r\n    position: relative;\r\n    margin-bottom: 1em;\r\n    .header{\r\n        padding: .25em .75em;\r\n        color: #fff;\r\n        background-color: ${props => props.color};\r\n    }\r\n    .skeleton-container{\r\n        padding: .5em;\r\n        padding-bottom: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        .item{\r\n            height: 1em;\r\n            background: #ecf0f1;\r\n            margin-bottom: .5em;\r\n            border-radius: .25em;\r\n        }\r\n    }\r\n    .input{\r\n        width: .5em;\r\n        height: 1em;\r\n        background: #3498db;\r\n        top: calc(50% - .5em);\r\n        position: absolute;\r\n        border-radius: 1em 0 0 1em;\r\n        left: -.5em;\r\n    }\r\n    .output{\r\n        width: .5em;\r\n        height: 1em;\r\n        background: #2ecc71;\r\n        top: calc(50% - .5em);\r\n        position: absolute;\r\n        border-radius: 0 1em 1em 0;\r\n        right: -.5em;\r\n    }\r\n`;\r\n\r\nexport default ({nodes}) => {\r\n\r\n    const onDragStart = (event, nodeType) => {\r\n        event.dataTransfer.setData('application/reactflow', nodeType);\r\n        event.dataTransfer.effectAllowed = 'move';\r\n    };\r\n  \r\n    return (\r\n        <Container>\r\n            {nodes.map((data, index)=>\r\n                <Node \r\n                    onDragStart={(event) => onDragStart(event, data.type)} \r\n                    draggable\r\n                    color={data.color}\r\n                    key={index}\r\n                >\r\n                    <div className='header'>\r\n                        {data.name}\r\n                    </div>\r\n                    <div className='skeleton-container'>\r\n                        <div className='item'></div>\r\n                        <div className='item'></div>    \r\n                    </div>\r\n                    {\r\n                    // <div className='input'></div>\r\n                    // <div className='output'></div>\r\n                    }\r\n                </Node>\r\n            )}\r\n            {\r\n                // <div className=\"dndnode\" onDragStart={(event) => onDragStart(event, 'ifElse')} draggable>\r\n                //     Nodo si y no\r\n                // </div>\r\n                // <div className=\"dndnode output\" onDragStart={(event) => onDragStart(event, 'answer')} draggable>\r\n                //     Nodo respuesta \r\n                // </div>\r\n            }\r\n      </Container>\r\n    );\r\n}","import React from 'react';\r\nimport Edge from './Edge';\r\nimport { NormalNode, IfElseNode, AnswerNode } from './Node';\r\nimport ReactFlow, { removeElements, addEdge, ReactFlowProvider, Controls } from 'react-flow-renderer';\r\n\r\nimport Sidebar from '../Sidebar';\r\n\r\nconst nodeTypes = {\r\n  normal: NormalNode,\r\n  ifElse: IfElseNode,\r\n  answer:AnswerNode,\r\n};\r\n\r\nconst edgeTypes = {\r\n  custom: Edge,\r\n};\r\n\r\nconst initialElements = [\r\n];\r\n\r\nlet id = 0;\r\nconst getId = () => `dndnode_${id++}`;\r\n\r\nexport default () => {\r\n  const reactFlowWrapper = React.useRef(null);\r\n  const [reactFlowInstance, setReactFlowInstance] = React.useState(null);\r\n\r\n  \r\n  const [elements, setElements] = React.useState(initialElements);\r\n\r\n\r\n  const onConnect = (params) => setElements((els) => addEdge(params, els));\r\n  const onElementsRemove = (elementsToRemove) =>\r\n    setElements((els) => removeElements(elementsToRemove, els));\r\n\r\n\r\n  const onLoad = (_reactFlowInstance) =>\r\n    setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onDragOver = (event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  };\r\n\r\n  const onDrop = (event) => {\r\n    event.preventDefault();\r\n\r\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n    const type = event.dataTransfer.getData('application/reactflow');\r\n    const position = reactFlowInstance.project({\r\n      x: event.clientX - reactFlowBounds.left,\r\n      y: event.clientY - reactFlowBounds.top,\r\n    });\r\n    const newNode = {\r\n      id: getId(),\r\n      type,\r\n      position,\r\n      data: { title:'Titulo de la pregunta', id:elements.length+1, answers:[{text:'Respuesta 1'}, {text:'Respuesta 1'}] },\r\n      dragHandle: '.drag-handle',\r\n      animated: true,\r\n      style: { stroke: 'red' },\r\n    };\r\n\r\n    setElements((es) => es.concat(newNode));\r\n  };\r\n\r\n  return (\r\n    <div className=\"dndflow\" style={{backgroundColor:'red'}}>\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}  style={{ height: '100vh', backgroundColor: '#f0f0f0' }}>\r\n          <ReactFlow\r\n            nodeTypes={nodeTypes} \r\n            edgeTypes={edgeTypes} \r\n            elements={elements}\r\n            onConnect={onConnect}\r\n            onElementsRemove={onElementsRemove}\r\n            onLoad={onLoad}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n          >\r\n            <Controls/>\r\n          </ReactFlow>\r\n        </div>\r\n        <Sidebar \r\n          nodes={[\r\n            {\r\n              name:'Nodo normal',\r\n              color:'#e67e22',\r\n              type:'normal'\r\n            },\r\n            {\r\n              name:'Nodo Si/No',\r\n              color:'#9b59b6',\r\n              type:'ifElse'\r\n            },\r\n            {\r\n              name:'Nodo respuesta',\r\n              color:'#3498db',\r\n              type:'answer'\r\n            }\r\n          ]}\r\n        />\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { getBezierPath, getMarkerEnd } from 'react-flow-renderer';\r\n\r\nexport default ({\r\n  id,\r\n  sourceX,\r\n  sourceY,\r\n  targetX,\r\n  targetY,\r\n  sourcePosition,\r\n  targetPosition,\r\n  style = {},\r\n  data,\r\n  arrowHeadType,\r\n  markerEndId,\r\n}) => {\r\n  \r\n  const edgePath = getBezierPath({ sourceX, sourceY, sourcePosition, targetX, targetY, targetPosition });\r\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\r\n\r\n  return (\r\n    <>\r\n      <path id={id} style={{...style}} className=\"react-flow__edge-path\" d={edgePath} markerEnd={markerEnd}/>\r\n      <text>\r\n        <textPath href={`#${id}`} style={{ fontSize: '12px' }} startOffset=\"50%\" textAnchor=\"middle\">\r\n          {data.text} \r\n        </textPath>\r\n      </text>\r\n    </>\r\n  );\r\n}","import './App.css';\nimport React from 'react';\nimport Flow from './Components/Flow';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Flow\n      \n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}