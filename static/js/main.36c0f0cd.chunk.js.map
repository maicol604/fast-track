{"version":3,"sources":["Components/Flow/Node/Basic/index.js","Components/Flow/Node/IfElse/index.js","Components/Flow/Node/Answer/index.js","Components/Sidebar/index.js","Components/Flow/index.js","Components/Flow/Edge/index.js","App.js","reportWebVitals.js","index.js"],"names":["primaryColor","NodeWrapper","styled","div","Container","onDragStart","event","nodeType","dataTransfer","setData","effectAllowed","className","draggable","nodeTypes","normal","data","variant","xmlns","class","width","height","viewBox","fill","stroke","d","cx","cy","r","title","type","position","id","answers","map","item","index","text","ifElse","answer","edgeTypes","custom","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","style","arrowHeadType","markerEndId","edgePath","getBezierPath","markerEnd","getMarkerEnd","href","fontSize","startOffset","textAnchor","initialElements","reactFlowWrapper","React","useRef","useState","reactFlowInstance","setReactFlowInstance","elements","setElements","backgroundColor","ref","onConnect","params","els","addEdge","onElementsRemove","elementsToRemove","removeElements","onLoad","_reactFlowInstance","onDrop","preventDefault","reactFlowBounds","current","getBoundingClientRect","getData","project","x","clientX","left","y","clientY","top","newNode","length","dragHandle","animated","es","concat","onDragOver","dropEffect","Sidebar","App","Flow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36c0f0cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\nimport styled from 'styled-components';\r\n\r\nconst primaryColor = '#15295c';\r\nconst drawerColor = \"#b3b3b3\";\r\n\r\nconst NodeWrapper = styled.div`\r\n    border: 1px solid #ccc;\r\n    //border-left: 0;\r\n    //border-right: 0;\r\n    cursor: default;\r\n    position: relative;\r\n    background-color: #fff;\r\n    //overflow: hidden;\r\n    border-radius: .25em;\r\n    .drag-handle{\r\n        cursor: move;\r\n        display: flex;\r\n        border-bottom: 1px solid  ${primaryColor};\r\n        padding: .25em .75em;\r\n        color: #fff;\r\n        background-color: ${primaryColor};\r\n        border-radius: .2em .2em 0 0;\r\n        .handle{\r\n            display: flex;\r\n            align-items: center;\r\n            width: max-content;\r\n            margin-right: .25em;\r\n        }\r\n        &:hover{\r\n            .drawer-icon{\r\n                filter: brightness(1.25);\r\n            }\r\n        }\r\n    }\r\n    .in-handle{\r\n        border-radius: 0;\r\n        border-radius: 1em 0 0 1em;\r\n        background-color: #3498db;\r\n        border: none;\r\n        width: .5em;\r\n        transition: all .25s;\r\n        //height: calc(100% + 2px);\r\n        height: 1em;\r\n        //position: absolute;\r\n        //left: -1em;\r\n        left: 1.5em;\r\n        top:auto;\r\n        &:hover{\r\n            filter: brightness(1.25);\r\n        }\r\n    }\r\n    .out-handle{\r\n        border-radius: 0;\r\n        border-radius: 0 1em 1em 0;\r\n        background-color: #2ecc71;\r\n        border: none;\r\n        width: .5em;\r\n        transition: all .25s;\r\n        //height: calc(100% + 2px);   \r\n        height: 1em;\r\n        //position: absolute;\r\n        left: 0;\r\n        top:auto;\r\n        &:hover{\r\n            filter: brightness(1.25);\r\n        }\r\n    }\r\n    .drawer-icon{\r\n        stroke:  ${drawerColor};\r\n        transition: all .25s;\r\n    }\r\n    .answers{\r\n        padding: 0;\r\n        padding-top: .5em;\r\n        margin: 0;\r\n        .answer{\r\n            list-style: none;\r\n            cursor: pointer;\r\n            color: #15295c;\r\n            border-bottom: 1px solid #f0f0f0;\r\n            transition: all .25s;\r\n            background-color: #ddd;\r\n            padding: .25em 1em;\r\n            margin-left: .5em;\r\n            margin-right: .5em;\r\n            margin-bottom: .5em;\r\n            position: relative;\r\n            padding-left: 1.5em;\r\n            margin-left: 1.25em;\r\n            text-transform: capitalize;\r\n            border-radius: .25em;\r\n            &:hover{\r\n                color: #15295c;\r\n            }\r\n            .count-circle{\r\n                height: 2em;\r\n                border-radius: 50%;\r\n                background-color: ${primaryColor};\r\n                position: absolute;\r\n                left: -1em;\r\n                top: calc(50% - 1em);\r\n                width: 2em;\r\n                box-sizing: border-box;\r\n                border: 3px solid #fff;\r\n                color: #fff;\r\n                font-size: 1em;\r\n                text-align: center;\r\n            }\r\n        }\r\n    }\r\n    .handle-in-container{\r\n        background-color: transparent;\r\n        height: 100%;\r\n        width: 2em;\r\n        position: absolute;\r\n        left: -2em;\r\n        top: 0;\r\n        padding-top: 2em;\r\n        box-sizing: border-box;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        &:hover{\r\n            .in-handle{\r\n                width: 1em; \r\n                left: 1em;\r\n            }\r\n        }\r\n    }\r\n    .handle-out-container{\r\n        background-color: transparent;\r\n        height: 100%;\r\n        width: 2em;\r\n        position: absolute;\r\n        right: -2em;\r\n        top: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        padding-top: 2em;\r\n        box-sizing: border-box;\r\n        &:hover{\r\n            .out-handle{\r\n                width: 1em; \r\n                right: 1em;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport default ({ data, variant='' }) => {\r\n\r\n    return (\r\n      <NodeWrapper>\r\n        <div className='test'>\r\n            <span className=\"drag-handle\">\r\n                <div className='handle'>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-grip-vertical drawer-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                        <circle cx=\"9\" cy=\"5\" r=\"1\" />\r\n                        <circle cx=\"9\" cy=\"12\" r=\"1\" />\r\n                        <circle cx=\"9\" cy=\"19\" r=\"1\" />\r\n                        <circle cx=\"15\" cy=\"5\" r=\"1\" />\r\n                        <circle cx=\"15\" cy=\"12\" r=\"1\" />\r\n                        <circle cx=\"15\" cy=\"19\" r=\"1\" />\r\n                    </svg>\r\n                </div>\r\n                <div>\r\n                    {data.title}\r\n                </div>\r\n            </span>\r\n        </div>\r\n        <div className='handle-in-container'>\r\n            <Handle \r\n                type=\"target\" \r\n                position=\"left\" \r\n                id={`in-${data.id}`} \r\n                className={'in-handle'} \r\n            />\r\n        </div>\r\n        <ul className={'answers'}>\r\n            {data.answers.map((item, index)=>{\r\n                return (\r\n                    <li key={index} className={'answer'}>\r\n                        {item.text}\r\n                        <div className={'count-circle'}>\r\n                            {index+1}\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n        <div className='handle-out-container'>\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"right\"\r\n                id={`out-${data.id}`}\r\n                className={'out-handle'} \r\n            />\r\n        </div>\r\n      </NodeWrapper>\r\n    );\r\n};","import React from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\nimport styled from 'styled-components';\r\n\r\nconst primaryColor = '#15295c';\r\nconst drawerColor = \"#b3b3b3\";\r\n\r\nconst NodeWrapper = styled.div`\r\n    border: 1px solid #ccc;\r\n    //border-left: 0;\r\n    //border-right: 0;\r\n    cursor: default;\r\n    position: relative;\r\n    background-color: #fff;\r\n    border-radius: .25em;\r\n    .drag-handle{\r\n        cursor: move;\r\n        display: flex;\r\n        border-bottom: 1px solid  ${primaryColor};\r\n        padding: .25em .75em;\r\n        color: #fff;\r\n        background-color: ${primaryColor};\r\n        border-radius: .2em .2em 0 0;\r\n        .handle{\r\n            display: flex;\r\n            align-items: center;\r\n            width: max-content;\r\n            margin-right: .25em;\r\n        }\r\n        &:hover{\r\n            .drawer-icon{\r\n                filter: brightness(1.25);\r\n            }\r\n        }\r\n    }\r\n    .in-handle{\r\n        border-radius: 0;\r\n        border-radius: 1em 0 0 1em;\r\n        background-color: #3498db;\r\n        border: none;\r\n        width: .5em;\r\n        height: 1em;\r\n        transition: all .25s;\r\n        //height: calc(100% + 2px);\r\n        position: absolute;\r\n        left: 1.5em;\r\n        &:hover{\r\n            filter: brightness(1.25);\r\n        }\r\n    }\r\n    .out-handle-if, .out-handle-else{\r\n        border-radius: 0;\r\n        border-radius: 0 1em 1em 0;\r\n        background-color: #5ed1d8;\r\n        border: none;\r\n        width: .5em;\r\n        height: 1em;\r\n        transition: all .25s;\r\n        //right: 1.5em;\r\n        //height: calc(50% + 0px);   \r\n        //position: absolute;\r\n        position: relative;\r\n        top: auto;\r\n        left: 0;\r\n        &:hover{\r\n            filter: brightness(1.25);\r\n        }\r\n    }\r\n    .handle-in-container{\r\n        background-color: transparent;\r\n        height: 100%;\r\n        width: 2em;\r\n        position: absolute;\r\n        left: -2em;\r\n        top: 0;\r\n        padding-top: 2em;\r\n        box-sizing: border-box;\r\n        &:hover{\r\n            .in-handle{\r\n                width: 1em; \r\n                left: 1em;\r\n            }\r\n        }\r\n    }\r\n    .handle-out-container{\r\n        background-color: transparent;\r\n        height: 100%;\r\n        width: 2em;\r\n        position: absolute;\r\n        right: -2em;\r\n        top: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-around;\r\n        padding-top: 2em;\r\n        box-sizing: border-box;\r\n        &:hover{\r\n            .out-handle-if, .out-handle-else{\r\n                width: 1em; \r\n                right: 1em;\r\n            }\r\n        }\r\n    }\r\n    .out-handle-if{\r\n        //top: calc(25%);\r\n        background-color: #2ecc71;\r\n    }\r\n    .out-handle-else{\r\n        //top: calc(75%);\r\n        background-color: #e74c3c;\r\n    }\r\n    .drawer-icon{\r\n        stroke:  ${drawerColor};\r\n        transition: all .25s;\r\n    }\r\n    .answers{\r\n        padding: 0;\r\n        padding-top: .5em;\r\n        margin: 0;\r\n        .answer{\r\n            list-style: none;\r\n            cursor: pointer;\r\n            color: #15295c;\r\n            border-bottom: 1px solid #f0f0f0;\r\n            transition: all .25s;\r\n            background-color: #ddd;\r\n            padding: .25em 1em;\r\n            margin-left: .5em;\r\n            margin-right: .5em;\r\n            margin-bottom: .5em;\r\n            position: relative;\r\n            padding-left: 1.5em;\r\n            margin-left: 1.25em;\r\n            text-transform: capitalize;\r\n            border-radius: .25em;\r\n            &:hover{\r\n                color: #15295c;\r\n            }\r\n            .count-circle{\r\n                height: 2em;\r\n                border-radius: 50%;\r\n                background-color: ${primaryColor};\r\n                position: absolute;\r\n                left: -1em;\r\n                top: calc(50% - 1em);\r\n                width: 2em;\r\n                box-sizing: border-box;\r\n                border: 3px solid #fff;\r\n                color: #fff;\r\n                font-size: 1em;\r\n                text-align: center;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default ({ data }) => {\r\n\r\n    return (\r\n      <NodeWrapper>\r\n        <div className='test'>\r\n            <span className=\"drag-handle\">\r\n                <div className='handle'>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-grip-vertical drawer-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                        <circle cx=\"9\" cy=\"5\" r=\"1\" />\r\n                        <circle cx=\"9\" cy=\"12\" r=\"1\" />\r\n                        <circle cx=\"9\" cy=\"19\" r=\"1\" />\r\n                        <circle cx=\"15\" cy=\"5\" r=\"1\" />\r\n                        <circle cx=\"15\" cy=\"12\" r=\"1\" />\r\n                        <circle cx=\"15\" cy=\"19\" r=\"1\" />\r\n                    </svg>\r\n                </div>\r\n                <div>\r\n                    {data.title}\r\n                </div>\r\n            </span>\r\n        </div>\r\n        <div className='handle-in-container'>\r\n            <Handle \r\n                type=\"target\" \r\n                position=\"left\" \r\n                id={`in-${data.id}`} \r\n                className={'in-handle'} \r\n            />\r\n        </div>\r\n        <ul className={'answers'}>\r\n            {data.answers.map((item, index)=>{\r\n                return (\r\n                    <li key={index} className={'answer'}>\r\n                        {item.text}\r\n                        <div className={'count-circle'}>\r\n                            {index+1}\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n        <div className='handle-out-container'>\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"right\"\r\n                id={`out-if-${data.id}`}\r\n                className={'out-handle-if'} \r\n            />\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"right\"\r\n                id={`out-else-${data.id}`}\r\n                className={'out-handle-else'} \r\n            />\r\n        </div>\r\n      </NodeWrapper>\r\n    );\r\n};","import React from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\nimport styled from 'styled-components';\r\n\r\nconst primaryColor = '#15295c';\r\nconst drawerColor = \"#b3b3b3\";\r\n\r\nconst NodeWrapper = styled.div`\r\n    border: 1px solid #ccc;\r\n    //border-left: 0;\r\n    //border-right: 0;\r\n    cursor: default;\r\n    position: relative;\r\n    background-color: #fff;\r\n    //overflow: hidden;\r\n    border-radius: .25em;\r\n    .drag-handle{\r\n        cursor: move;\r\n        display: flex;\r\n        border-bottom: 1px solid  ${primaryColor};\r\n        padding: .25em .75em;\r\n        color: #fff;\r\n        background-color: ${primaryColor};\r\n        border-radius: .2em .2em 0 0;\r\n        .handle{\r\n            display: flex;\r\n            align-items: center;\r\n            width: max-content;\r\n            margin-right: .25em;\r\n        }\r\n        &:hover{\r\n            .drawer-icon{\r\n                filter: brightness(1.25);\r\n            }\r\n        }\r\n    }\r\n    .in-handle{\r\n        border-radius: 0;\r\n        border-radius: 1em 0 0 1em;\r\n        background-color: #3498db;\r\n        border: none;\r\n        width: .5em;\r\n        transition: all .25s;\r\n        //height: calc(100% + 2px);\r\n        height: 1em;\r\n        //position: absolute;\r\n        //left: -1em;\r\n        left: 1.5em;\r\n        top:auto;\r\n        &:hover{\r\n            filter: brightness(1.25);\r\n        }\r\n    }\r\n    .out-handle{\r\n        border-radius: 0;\r\n        border-radius: 0 1em 1em 0;\r\n        background-color: #2ecc71;\r\n        border: none;\r\n        width: .5em;\r\n        transition: all .25s;\r\n        //height: calc(100% + 2px);   \r\n        height: 1em;\r\n        //position: absolute;\r\n        left: 0;\r\n        top:auto;\r\n        &:hover{\r\n            filter: brightness(1.25);\r\n        }\r\n    }\r\n    .drawer-icon{\r\n        stroke:  ${drawerColor};\r\n        transition: all .25s;\r\n    }\r\n    .answers{\r\n        padding: 0;\r\n        padding-top: .5em;\r\n        margin: 0;\r\n        margin-right: 0em;\r\n        .answer{\r\n            list-style: none;\r\n            cursor: pointer;\r\n            color: #15295c;\r\n            border-bottom: 1px solid #f0f0f0;\r\n            transition: all .25s;\r\n            background-color: #ddd;\r\n            padding: .25em 1em;\r\n            margin-left: .5em;\r\n            margin-right: .5em;\r\n            margin-bottom: .5em;\r\n            position: relative;\r\n            padding-left: 1.5em;\r\n            margin-left: 1.25em;\r\n            text-transform: capitalize;\r\n            border-radius: .25em;\r\n            &:hover{\r\n                color: #15295c;\r\n            }\r\n            .count-circle{\r\n                height: 2em;\r\n                border-radius: 50%;\r\n                background-color: ${primaryColor};\r\n                position: absolute;\r\n                left: -1em;\r\n                top: calc(50% - 1em);\r\n                width: 2em;\r\n                box-sizing: border-box;\r\n                border: 3px solid #fff;\r\n                color: #fff;\r\n                font-size: 1em;\r\n                text-align: center;\r\n            }\r\n        }\r\n    }\r\n    .handle-in-container{\r\n        background-color: transparent;\r\n        height: 100%;\r\n        width: 2em;\r\n        position: absolute;\r\n        left: -2em;\r\n        top: 0;\r\n        padding-top: 2em;\r\n        box-sizing: border-box;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        &:hover{\r\n            .in-handle{\r\n                width: 1em; \r\n                left: 1em;\r\n            }\r\n        }\r\n    }\r\n    .handle-out-container{\r\n        background-color: transparent;\r\n        height: 100%;\r\n        width: 2em;\r\n        position: absolute;\r\n        right: -2em;\r\n        top: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        padding-top: 1em;\r\n        box-sizing: border-box;\r\n        &:hover{\r\n            .out-handle{\r\n                width: 1em; \r\n                right: 1em;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport default ({ data, variant='' }) => {\r\n\r\n    return (\r\n      <NodeWrapper>\r\n        <div className='test'>\r\n            <span className=\"drag-handle\">\r\n                <div className='handle'>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-grip-vertical drawer-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                        <circle cx=\"9\" cy=\"5\" r=\"1\" />\r\n                        <circle cx=\"9\" cy=\"12\" r=\"1\" />\r\n                        <circle cx=\"9\" cy=\"19\" r=\"1\" />\r\n                        <circle cx=\"15\" cy=\"5\" r=\"1\" />\r\n                        <circle cx=\"15\" cy=\"12\" r=\"1\" />\r\n                        <circle cx=\"15\" cy=\"19\" r=\"1\" />\r\n                    </svg>\r\n                </div>\r\n                <div>\r\n                    {data.title}\r\n                </div>\r\n            </span>\r\n        </div>\r\n        <div className='handle-in-container'>\r\n            <Handle \r\n                type=\"target\" \r\n                position=\"left\" \r\n                id={`in-${data.id}`} \r\n                className={'in-handle'} \r\n            />\r\n        </div>\r\n        <ul className={'answers'}>\r\n            {data.answers.map((item, index)=>{\r\n                return (\r\n                    <li key={index} className={'answer'}>\r\n                        {item.text}\r\n                        <div className={'count-circle'}>\r\n                            {index+1}\r\n                        </div>\r\n                        <div className='handle-out-container'>\r\n                            <Handle\r\n                                type=\"source\"\r\n                                position=\"right\"\r\n                                id={`out-${data.id}-${index}`}\r\n                                className={'out-handle'} \r\n                            />\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n      </NodeWrapper>\r\n    );\r\n};","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 15vw;\r\n    position: fixed;\r\n    left: 0;\r\n    top: 0;\r\n    height: 100vh;\r\n    box-sizing: border-box;\r\n    padding: 1em;\r\n    z-index: 1000;\r\n    background-color: #fff;\r\n    .dragable-element{\r\n        cursor: move;\r\n        &:hover{\r\n            transform: rotateX(.1);\r\n        }\r\n    }\r\n    .dndnode{\r\n        border: 1px solid #000;\r\n        border-radius: .25em;\r\n        padding: 1em;\r\n        margin-bottom: .5em;\r\n    }\r\n`;\r\n\r\nexport default () => {\r\n\r\n    const onDragStart = (event, nodeType) => {\r\n        event.dataTransfer.setData('application/reactflow', nodeType);\r\n        event.dataTransfer.effectAllowed = 'move';\r\n    };\r\n  \r\n    return (\r\n      <Container>\r\n            <div className=\"dndnode input\" onDragStart={(event) => onDragStart(event, 'normal')} draggable>\r\n                Nodo basico\r\n            </div>\r\n            <div className=\"dndnode\" onDragStart={(event) => onDragStart(event, 'ifElse')} draggable>\r\n                Nodo si y no\r\n            </div>\r\n            <div className=\"dndnode output\" onDragStart={(event) => onDragStart(event, 'answer')} draggable>\r\n                Nodo respuesta \r\n            </div>\r\n      </Container>\r\n    );\r\n}","import React from 'react';\r\nimport Edge from './Edge';\r\nimport { NormalNode, IfElseNode, AnswerNode } from './Node';\r\nimport ReactFlow, { removeElements, addEdge, ReactFlowProvider, Controls } from 'react-flow-renderer';\r\n\r\nimport Sidebar from '../Sidebar';\r\n\r\nconst nodeTypes = {\r\n  normal: NormalNode,\r\n  ifElse: IfElseNode,\r\n  answer:AnswerNode,\r\n};\r\n\r\nconst edgeTypes = {\r\n  custom: Edge,\r\n};\r\n\r\nconst initialElements = [\r\n];\r\n\r\nlet id = 0;\r\nconst getId = () => `dndnode_${id++}`;\r\n\r\nexport default () => {\r\n  const reactFlowWrapper = React.useRef(null);\r\n  const [reactFlowInstance, setReactFlowInstance] = React.useState(null);\r\n\r\n  \r\n  const [elements, setElements] = React.useState(initialElements);\r\n\r\n\r\n  const onConnect = (params) => setElements((els) => addEdge(params, els));\r\n  const onElementsRemove = (elementsToRemove) =>\r\n    setElements((els) => removeElements(elementsToRemove, els));\r\n\r\n\r\n  const onLoad = (_reactFlowInstance) =>\r\n    setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onDragOver = (event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  };\r\n\r\n  const onDrop = (event) => {\r\n    event.preventDefault();\r\n\r\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n    const type = event.dataTransfer.getData('application/reactflow');\r\n    const position = reactFlowInstance.project({\r\n      x: event.clientX - reactFlowBounds.left,\r\n      y: event.clientY - reactFlowBounds.top,\r\n    });\r\n    const newNode = {\r\n      id: getId(),\r\n      type,\r\n      position,\r\n      data: { title:'Titulo de la pregunta', id:elements.length+1, answers:[{text:'Respuesta 1'}, {text:'Respuesta 1'}] },\r\n      dragHandle: '.drag-handle',\r\n      animated: true,\r\n      style: { stroke: 'red' },\r\n    };\r\n\r\n    setElements((es) => es.concat(newNode));\r\n  };\r\n\r\n  return (\r\n    <div className=\"dndflow\" style={{backgroundColor:'red'}}>\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}  style={{ height: '100vh', backgroundColor: '#f0f0f0' }}>\r\n          <ReactFlow\r\n            nodeTypes={nodeTypes} \r\n            edgeTypes={edgeTypes} \r\n            elements={elements}\r\n            onConnect={onConnect}\r\n            onElementsRemove={onElementsRemove}\r\n            onLoad={onLoad}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n          >\r\n            <Controls/>\r\n          </ReactFlow>\r\n        </div>\r\n        <Sidebar />\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { getBezierPath, getMarkerEnd } from 'react-flow-renderer';\r\n\r\nexport default ({\r\n  id,\r\n  sourceX,\r\n  sourceY,\r\n  targetX,\r\n  targetY,\r\n  sourcePosition,\r\n  targetPosition,\r\n  style = {},\r\n  data,\r\n  arrowHeadType,\r\n  markerEndId,\r\n}) => {\r\n  \r\n  const edgePath = getBezierPath({ sourceX, sourceY, sourcePosition, targetX, targetY, targetPosition });\r\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\r\n\r\n  return (\r\n    <>\r\n      <path id={id} style={{...style}} className=\"react-flow__edge-path\" d={edgePath} markerEnd={markerEnd}/>\r\n      <text>\r\n        <textPath href={`#${id}`} style={{ fontSize: '12px' }} startOffset=\"50%\" textAnchor=\"middle\">\r\n          {data.text} \r\n        </textPath>\r\n      </text>\r\n    </>\r\n  );\r\n}","import './App.css';\nimport React from 'react';\nimport Flow from './Components/Flow';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Flow\n        //initialElements={JSON.parse(JSON.stringify(elements))}\n      />\n    </div>\n    /*<DnDFlow/>*/\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}